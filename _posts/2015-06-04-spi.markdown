---
layout:     post
title:      "SPI接口的原理与驱动设计(1)"
date:       2015-06-04 23:58:00
author:     "程照原"
header-img: "img/home-bg.jpg"
---
#SPI接口的原理与驱动设计(1)
　　SPI(Serial Peripheral Interface, 串行外设接口)是Motorala公司提出的一种同步串行数据传输标准，在很多器件中被广泛使用。

###1.接口
　　SPI接口经常被称为4线串行总线，以Master/Slave模式工作，数据传输过程由主机初始化。其使用的四条型号线分别为：
    
    1)SCLK:串行时钟，用来同步数据传输，由主机输出；
    2)MOSI:主机输出从机输入数据线；
    3)MISO:主机输入从机输出数据线；
    4)SS/CS:片选线，低电平有效，由主机输出，片选分为Independent和Cooperative模式。

###2.特点
　　1. 采用主从模式的控制方式。

    SPI规定了两个SPI设备之间通信必须由Master来控制Slave。一个Master可以通过提供Clock以及对Slave进行Slave Select来控制多个Slave设备，SPI协议还规定Slave设备的Clock由Master通过SCK管脚提供给Slave，Slave本身不能产生火控制Clock，没有Clock则Slave不能正常工作。

　　2. 采用同步方式进行传输。

    主设备会根据将要交换的数据来产生相应的Clock Pluse(时钟脉冲)，时钟脉冲组成了Clock Signal(时钟信号)，时钟信号通过时钟极性(CPOL)和时钟相位(CPHA)控制着两个SPI设备间何时数据交换以及何时对接收到的数据进行采样，来保证数据在两个设备间是同步传输的。

　　3. 数据交换。

    1)SPI设备间的数据传输之所以又被称为数据交换，是因为SPI协议规定一个SPI设备不能在数据通信过程中仅仅只充当一个“发送者”或者“接受者”。在每个Clock周期内，SPI设备都会发送并接收一个bit大小的数据，相当于该设备有一个bit大小的数据被交换了。
    2)一个Slave设备要想能够接受到Master发过来的控制信号，必须在此之前能够被Master设备进行访问(Access)。所以，Master设备必须首先通过SS/CS对Slave设备进行片选。
    3)在数据传输的过程中，每次接收到的数据必须在下一次数据传输之前被采样，如果之前接收到的数据没有被读取，那么这些已经接收完成的数据将有可能被丢弃，导致SPI物理模块最终失效。因此，在驱动程序中一般都会在SPI传输完数据后，去读取SPI设备里的数据，即使这些数据(Dummy Data)在我们程序里是无用的。

###3.工作机制
####概述
![file](/blog/img/spi_arch.jpg)
下面是几个组件的具体解释：

    SSPBUF, Synchronous Serial Port Buffer，内部缓冲区，保存传输过程中的临时数据；
    SSPSR,Synchronous Serial Port Register，位移寄存器(Shift Register)，根据数据位宽(bit-width)把数据移入或者移出SSPBUF;
    Controller，控制寄存器，用来配置SPI总线的传输模式。
    以及剩下的四个通讯管脚(SCK, SS, MOSI, MISO)。

####Timing
上图通过Master与Slave之间交换1Byte数据来说明SPI协议的工作机制。

    CPOL：时钟极性，表示SPI在空闲时，时钟信号是高电平还是低电平。若CPOL被设为1，那么该设备在空闲时SCK管脚下的时钟信号为高电平，当CPOL被设为0时则正好相反。
    CPHA：时钟相位，表示SPI设备是在SCK管脚上的时钟信号变为上升沿时出发数据采样，还是在时钟信号变为下降沿是出发数据采样，若CPHA被设置为1，则SPI设备在时钟信号变为下降沿时触发数据采样，在上升沿时发送数据。当被设为0是也正好相反。
